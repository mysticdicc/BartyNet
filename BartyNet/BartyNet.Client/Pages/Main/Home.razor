@inject WebsitePostAPI WebsitePostAPI

@page "/home"

<PageTitle>Home</PageTitle>

<MudStack>
    <div style="width: 100%; padding-left: 1rem; padding-right: 1rem;">
        <div style="width: 100%">
            <MudGrid Spacing="0">
                <MudItem xs="12" sm="8" md="5" lg="5" Style="padding: 0;">
                    <div style="display: flex; flex-direction: column; justify-content: center; align-content: center; padding: 2rem;  height: 100%; width: 100%;">
                        <MudText Typo="Typo.h3" Align="Align.Center" Style="padding-bottom: 1rem;">
                            Life of Barty
                        </MudText>
                        <div style="margin-left: 1rem; margin-right: 1rem;">
                            <MudText Typo="Typo.body1" Align="Align.Center">
                                Documenting the life and adventures of Barty the service dog
                            </MudText>
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="4" md="7" lg="7" Style="display: flex; flex-direction: row; justify-content: center; padding: 0;">
                    <MudImage Src="/img/web/landscape_barty.jpg" Class="home_header_image" Fluid="true" ObjectFit="ObjectFit.Contain" />
                </MudItem>
            </MudGrid>
        </div>
    </div> 
    <MudDivider />
    <MudText Typo="Typo.h5" Style="padding-left: 1rem; padding-right: 1rem;">
        Recent Blog Posts
    </MudText>
    @if (null != recentPosts) 
    {
        foreach (var post in recentPosts) 
        {
            <RecentPost websitePost="post"/>
        }
    }
</MudStack>

@code {
    List<WebsitePost>? recentPosts;

    async protected override Task OnInitializedAsync()
    {
        await FetchRecentPosts();
        await base.OnInitializedAsync();
    }

    async Task FetchRecentPosts() {
        recentPosts = await WebsitePostAPI.GetRecentByType(WebsitePost.PostType.Blog);
    }
}
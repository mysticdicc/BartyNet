@inject IJSRuntime JSRuntime

<div class="mkd_edit_box">
    <div style="width: 100%; border-radius: 1rem; box-shadow: rgba(20, 20, 20, 0.15) 5px 5px 5px; border-color: #411c63; border-style: solid; border-width: 1px;">
        <div class="mkd_edit_toolbar">
            <div style="padding: 0.5rem; display: flex; height: 100%;">
                <MudIcon Icon="@Icons.Material.Filled.Preview" Class="mkd_edit_button" onclick="@(() => OnClickPreview())" />
                <MudIcon Icon="@Icons.Material.Filled.ListAlt" Class="mkd_edit_button" onclick="@(() => OnInsertList())" />
                <div class="mkd_dropdown">
                    <div class="mkd_drop_btn">
                        <div class="mkd_drop_btn_text">
                            Add Link
                        </div>
                    </div>
                    <div class="mkd_dropdown_cnt mkd_dropdown_cnt_phone">
                        <div style="display: flex; width: 100%; flex-wrap: wrap;">
                            <div class="mkd_cnt_insert_col_left">
                                <div style="width: 100%">
                                    Title
                                </div>
                                <div style="width: 100%">
                                    <input class="mkd_cnt_insert_text" @bind-Value="@insertTitle" @bind-Value:event="oninput" />
                                </div>
                            </div>
                            <div class="mkd_cnt_insert_col_right">
                                <div style="width: 100%">
                                    URL
                                </div>
                                <div style="width: 100%">
                                    <input class="mkd_cnt_insert_text" @bind-Value="@insertUrl" @bind-Value:event="oninput" />
                                </div>
                            </div>
                        </div>
                        <div style="display: flex; width: 100%; padding-top: 0.5rem;">
                            <div class="mkd_cnt_insert_btn" onclick="@(() => InsertLink(insertTitle, insertUrl))">
                                <div class="mkd_drop_btn_text">
                                    Insert
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mkd_dropdown">
                    <div class="mkd_drop_btn">
                        <div class="mkd_drop_btn_text">
                            Format
                        </div>
                    </div>
                    <div class="mkd_dropdown_cnt">
                        <div class="mkd_cnt_button" onclick="@(() => InsertHeader(1))">
                            <div class="mkd_drop_btn_text">
                                Header 1
                            </div>
                        </div>
                        <div class="mkd_cnt_button" onclick="@(() => InsertHeader(2))">
                            <div class="mkd_drop_btn_text">
                                Header 2
                            </div>
                        </div>
                        <div class="mkd_cnt_button" onclick="@(() => InsertHeader(3))">
                            <div class="mkd_drop_btn_text">
                                Header 3
                            </div>
                        </div>
                        <div class="mkd_cnt_button" onclick="@(() => InsertBold())">
                            <div class="mkd_drop_btn_text">
                                <b>Bold</b>
                            </div>
                        </div>
                        <div class="mkd_cnt_button" onclick="@(() => InsertItalic())">
                            <div class="mkd_drop_btn_text">
                                <i>Italic</i>
                            </div>
                        </div>
                        <div class="mkd_cnt_button" onclick="@(() => InsertStrikethrough())">
                            <div class="mkd_drop_btn_text">
                                <s>Strikethrough</s>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div style="width: 100%;">
            <textarea id="markdown_editor" name="markdown" oninput="@((ChangeEventArgs e) => OnTextChanged(e))" class="mkd_edit_textbox" >
                @_editText
            </textarea>
        </div>
    </div>
    <div hidden="@previewHidden" class="mkd_preview_area">
        <div class="mkd_top_preview">
            <MudText Typo="Typo.h6" Align="Align.Center" Style="padding: 0.5rem;">
                Preview:
            </MudText>
        </div>
        <div style="max-height: 100%;">
            <div class="mkd_preview_text">
                @((MarkupString)previewText)
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] required public string editText { get; set; }
    private string _editText = String.Empty;
    [Parameter] public EventCallback<string> EditTextChanged { get; set; }

    string insertTitle = String.Empty;
    string insertUrl = String.Empty;

    async Task OnTextChanged(ChangeEventArgs args) 
    {
        if (null != args && null != args.Value) 
        {
            _editText = args.Value.ToString()!;
            previewText = Markdown.ToHtml(_editText);
            await EditTextChanged.InvokeAsync(_editText);
        }
    }

    [JSInvokable("markupTextAdded")]
    public async Task TextChangedInvokedByJs(string text) 
    {
        _editText = text;
        previewText = Markdown.ToHtml(_editText);
        await EditTextChanged.InvokeAsync(_editText);
    }

    protected override Task OnParametersSetAsync()
    {
        _editText = editText;
        previewText = Markdown.ToHtml(_editText);
        return base.OnParametersSetAsync();
    }

    public string previewText = String.Empty;
    bool previewHidden = false;

    void OnClickPreview() 
    {
        previewHidden = !previewHidden;
        StateHasChanged();
    }

    async Task InsertMarkdownFunction(string markdown) 
    {
        var dotNetObj = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("insertAtCurrentPos", markdown, dotNetObj);
    }

    async Task OnInsertList() 
    {
        await InsertMarkdownFunction("* list item\n* list item\n* list item");
    }

    async Task InsertHeader(int header) 
    {
        switch(header) 
        {
            case 1:
                await InsertMarkdownFunction("\n# header");
                return;
            case 2:
                await InsertMarkdownFunction("\n## header");
                return;
            case 3:
                await InsertMarkdownFunction("\n### header");
                return;
        }
    }

    async Task InsertBold() 
    {
        await InsertMarkdownFunction("**bold text**");
    }

    async Task InsertItalic() 
    {
        await InsertMarkdownFunction("*italic text*");
    }

    async Task InsertLink(string title, string url)
    {
        if (title != String.Empty && url != String.Empty) 
        {
            await InsertMarkdownFunction($"[{title}]({url})");
            insertTitle = String.Empty;
            insertUrl = String.Empty;
        }
    }

    async Task InsertStrikethrough() 
    {
        await InsertMarkdownFunction("<s>strikethrough text</s>");
    }
}

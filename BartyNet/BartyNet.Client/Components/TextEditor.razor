@inject IJSRuntime JSRuntime

<div style="padding: 1rem; width: 100%">
    <div style="width: 100%; border-radius: 1rem; box-shadow: rgba(20, 20, 20, 0.15) 5px 5px 5px; border-color: #411c63; border-style: solid; border-width: 1px;">
        <div class="toolbar">
            <div style="padding: 0.5rem; display: flex; height: 100%;">
                <MudIcon Icon="@Icons.Material.Filled.Preview" Class="button" onclick="@(() => OnClickPreview())" />
                <MudIcon Icon="@Icons.Material.Filled.ListAlt" Class="button" onclick="@(() => OnInsertList())" />
                <div class="button" onclick="@(() => InsertHeader(1))">
                    <div class="header_button">
                        <MudText Typo="Typo.body2" Style="margin: auto;">
                            H1
                        </MudText>
                    </div>
                </div>
                <div class="button" onclick="@(() => InsertHeader(2))">
                    <div class="header_button">
                        <MudText Typo="Typo.body2" Style="margin: auto;">
                            H2
                        </MudText>
                    </div>
                </div>
                <div class="button" onclick="@(() => InsertHeader(3))">
                    <div class="header_button">
                        <MudText Typo="Typo.body2" Style="margin: auto;">
                            H3
                        </MudText>
                    </div>
                </div>
                <div class="button" onclick="@(() => InsertBold())">
                    <div class="header_button">
                        <MudText Typo="Typo.body2" Style="margin: auto;">
                            <b>B</b>
                        </MudText>
                    </div>
                </div>
                <div class="button" onclick="@(() => InsertItalic())">
                    <div class="header_button">
                        <MudText Typo="Typo.body2" Style="margin: auto;">
                            <i>i</i>
                        </MudText>
                    </div>
                </div>
                <MudIcon Icon="@Icons.Material.Filled.AddLink" Class="button" onclick="@(() => InsertLink())"/>
                <MudIcon Icon="@Icons.Material.Filled.StrikethroughS" Class="button" onclick="@(() => InsertStrikethrough())"/>
            </div>
        </div>
        <div style="width: 100%;">
            <textarea id="markdown_editor" name="markdown" oninput="@((ChangeEventArgs e) => OnTextChanged(e))" class="textbox" >
                @_editText
            </textarea>
        </div>
    </div>
    <div hidden="@previewHidden" class="preview_area">
        <div class="top_preview">
            <MudText Typo="Typo.h6" Align="Align.Center" Style="padding: 0.5rem;">
                Preview:
            </MudText>
        </div>
        <div style="padding: 0.5rem; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; color: white;">
            @((MarkupString)previewText)
        </div>
    </div>
</div>

<style>
    .top_preview {
    width: 100%;
    background-color: #411c63;
    box-shadow: rgba(20, 20, 20, 0.15) 5px 5px 5px;
    border-radius: 1rem 1rem 0rem 0rem;
    }

    .preview_area {
    width: 100%;
    margin-top: 1rem;
    background-color: #602a91;
    border-radius: 1rem;
    border-color: #411c63;
    border-style: solid;
    border-width: 1px;
    box-shadow: rgba(20, 20, 20, 0.15) 5px 5px 5px;
    }

    .toolbar {
    width: 100%;
    border-radius: 1rem 1rem 0rem 0rem;
    background-color: #411c63;
    }

    .button {
    width: 2rem;
    height: 2rem;
    margin-top: auto;
    margin-bottom: auto;
    display: flex;
    margin-left: 0.1rem;
    margin-right: 0.1rem;
    }

    .header_button {
    display: flex;
    border-color: white;
    border-style: solid;
    border-width: 1px;
    border-radius: 0.3rem;
    width: 1.7rem;
    height: 1.7rem;
    margin: auto;
    }

    .button:hover {
    box-shadow: rgba(20, 20, 20, 0.15) 2px 2px 2px;
    cursor: pointer;
    }

    .textbox {
    width: 100%;
    height: 20rem;
    border-radius: 0rem 0rem 1rem 1rem;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    font-size: 14px; 
    color: white;
    background-color: #602a91;
    box-sizing: border-box;
    resize: none;
    }
</style>

<script>
    function insertAtCurrentPos(inputString) {
    var textarea = document.getElementById("markdown_editor");
    var curPos = textarea.selectionStart;

    let x = textarea.value;

    textarea.value = x.slice(0, curPos) + inputString + x.slice(curPos);
    }
</script>

@code {
    [Parameter] required public string editText { get; set; }
    private string _editText = String.Empty;
    [Parameter] public EventCallback<string> EditTextChanged { get; set; }

    async Task OnTextChanged(ChangeEventArgs args) 
    {
        if (null != args && null != args.Value) 
        {
            _editText = args.Value.ToString()!;
            previewText = Markdown.ToHtml(_editText);
            await EditTextChanged.InvokeAsync(_editText);
        }
    }

    protected override Task OnParametersSetAsync()
    {
        _editText = editText;
        previewText = Markdown.ToHtml(_editText);
        return base.OnParametersSetAsync();
    }

    public string previewText = String.Empty;
    bool previewHidden = false;

    void OnClickPreview() 
    {
        previewHidden = !previewHidden;
        StateHasChanged();
    }

    async Task InsertMarkdownFunction(string markdown) 
    {
        await JSRuntime.InvokeVoidAsync("insertAtCurrentPos", markdown);
    }

    async Task OnInsertList() 
    {
        await InsertMarkdownFunction("* \n* \n* ");
    }

    async Task InsertHeader(int header) 
    {
        switch(header) 
        {
            case 1:
                await InsertMarkdownFunction("# ");
                return;
            case 2:
                await InsertMarkdownFunction("## ");
                return;
            case 3:
                await InsertMarkdownFunction("### ");
                return;
        }
    }

    async Task InsertBold() 
    {
        await InsertMarkdownFunction("**bold text**");
    }

    async Task InsertItalic() 
    {
        await InsertMarkdownFunction("*italic text*");
    }

    async Task InsertLink()
    {
        await InsertMarkdownFunction("[linktext](https://www.example.com)");
    }

    async Task InsertStrikethrough() 
    {
        await InsertMarkdownFunction("<s>strikethrough text</s>");
    }
}
